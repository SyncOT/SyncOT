import {
    combine,
    createId,
    createInvalidEntityError,
    separate,
    validate,
    Validator,
} from '@syncot/util'
import { Meta } from './meta'
import { SchemaKey } from './schema'

/**
 * A globally unique value suitable as an operation's primary key.
 *
 * All `OperationKey`s are generated on the client-side
 * and verified on the server-side. This way each operation has
 * a unique and persistent identity from the moment it is created by the client,
 * which makes it possible to safely submit the same operation multiple times
 * while guarateeing that it will be persisted at most once.
 *
 * The `userId` is included in the `OperationKey` to prevent malicious users from performing
 * key collision attacks targeting other users. There is a tiny non-zero chance that
 * the keys generated by the same user can collide, however, in practice a collision
 * would be likely to happen only if someone purposefully tried to cause it.
 */
export type OperationKey = string

/**
 * Creates a new OperationKey for the userId.
 */
export function createOperationKey(userId: string): OperationKey {
    return combine(userId, createId())
}

/**
 * Extracts a user ID from the given operation key.
 */
export function operationKeyUser(key: OperationKey): string {
    return separate(key)[0]
}

/**
 * An operation which can be applied to a document.
 */
export interface Operation {
    /**
     * A globally unique ID of this operation.
     */
    key: OperationKey
    /**
     * The document type.
     */
    type: string
    /**
     * The document ID.
     */
    id: string
    /**
     * The document version created by this operation.
     * It must be an integer between 1 (inclusive) and Number.MAX_SAFE_INTEGER (exclusive).
     */
    version: number
    /**
     * The ID of the schema of the content at the version created by this operation.
     */
    schema: SchemaKey
    /**
     * The action to apply to the document's content at `operation.version - 1` version
     * in order to produce the document's content at `operation.version` version.
     */
    data: any
    /**
     * The operation's metadata.
     */
    meta: Meta | null
}

/**
 * Validates the specified operation.
 * @returns The first encountered error, if found, otherwise undefined.
 */
export const validateOperation: Validator<Operation> = validate([
    (operation) =>
        typeof operation === 'object' && operation != null
            ? undefined
            : createInvalidEntityError('Operation', operation, null),
    (operation) =>
        typeof operation.key === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'key'),
    (operation) =>
        typeof operation.type === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'type'),
    (operation) =>
        typeof operation.id === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'id'),
    (operation) =>
        Number.isInteger(operation.version) &&
        operation.version > 0 &&
        operation.version < Number.MAX_SAFE_INTEGER
            ? undefined
            : createInvalidEntityError('Operation', operation, 'version'),
    (operation) =>
        typeof operation.schema === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'schema'),
    (operation) =>
        operation.hasOwnProperty('data')
            ? undefined
            : createInvalidEntityError('Operation', operation, 'data'),
    (operation) =>
        typeof operation.meta === 'object'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'meta'),
    (operation) =>
        operation.meta == null ||
        operation.meta.user == null ||
        typeof operation.meta.user === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'meta.user'),
    (operation) =>
        operation.meta == null ||
        operation.meta.time == null ||
        typeof operation.meta.time === 'number'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'meta.time'),
    (operation) =>
        operation.meta == null ||
        operation.meta.session == null ||
        typeof operation.meta.session === 'string'
            ? undefined
            : createInvalidEntityError('Operation', operation, 'meta.session'),
])
